import json
import time
import redis
import settings
import pickle
import pandas as pd
import numpy as np
import settings


# Connect to Redis 
db = redis.Redis(
host=settings.REDIS_IP,
port=settings.REDIS_PORT,
db=settings.REDIS_DB_ID
)

#Load the pipeline for preprocessing.
with open("./train/pickles/final_pipeline_fit.pickle", "rb") as f:
    final_pipeline_fit = pickle.load(f)

# Load the fitted machine learning model to make predictions.
xgb_model_fit = pickle.load(open("./train/pickles/xgb_model_fit.pickle", "rb"))

# Assign variables to pipeline and model.
preprocess = final_pipeline_fit
model = xgb_model_fit
    

def predict(form_dict):
    """
    Load the form_dict dictionary generated by the form, then, run our ML 
    model to get predictions.

    Parameters
    ----------
    form_dict : dict
        Input form data.

    Returns
    -------
    class_name, pred_probability : tuple(str, float)
        Model predicted class as a string and the corresponding confidence
        score as a number.
    """
    class_name = None
    probability = None

    print(form_dict)

    form_dict_df = pd.DataFrame.from_dict(form_dict, orient="index").T

    print(form_dict_df)
    
    # Change data types as to run preprocess
    form_dict_df[settings.columns_toint] = form_dict_df[settings.columns_toint].astype(np.int64)
    form_dict_df[settings.columns_tofloat] = form_dict_df[settings.columns_tofloat].astype(np.float64)
       
    preprocess_data = preprocess.transform(form_dict_df)
    xgb_pred = model.predict(preprocess_data)
    xgb_pred_proba = model.predict_proba(preprocess_data)
      
    class_name = xgb_pred
    probability = xgb_pred_proba[0][1]

    print(class_name)

    return class_name, round(float(probability),4)


def classify_process():
    """
    Loop indefinitely asking Redis for new jobs.
    When a new job arrives, takes it from the Redis queue, uses the loaded ML
    model to get predictions and stores the results back in Redis using
    the original job ID so other services can see it was processed and access
    the results.

    """
    while True:
        # Take a new job from Redis
        # String to json
        _, job_data_str = db.brpop(settings.REDIS_QUEUE)  
        job_data = json.loads(job_data_str) 

        # Run your ML model on the given data
        class_name, pred_probability = predict(job_data["form"])
        
        # Store model prediction and probability in a dict:
        pred_dict = {
                    "prediction": int(class_name),
                    "probability": str(pred_probability),
        }

        # Save results on Redis using job ID as the key 
        # Save in hash table key:job_id, value:pred_dict
        db.set(job_data["id"], json.dumps(pred_dict))  

        time.sleep(settings.SERVER_SLEEP)


if __name__ == "__main__":
    print("Launching ML service...")
    classify_process()
